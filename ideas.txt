- El cursor por default del navegador se va a remplazar
  con una especie de figura redonda que provoca el 
  efecto espejo en los elementos que tiene debajo

- Incluir una sección de la página en la que crea
  una ambientación espacial bastante profunda:

    Estrellas, nebulosas, degrados y contrastes bastante
    resaltantes

- El proyecto se conformaria de una serie de secciones
  estas se pueden mover por si solas y también usando algún botón,
  el objetivo de esta experiencia es llevar al usuario a través
  de diferentes experiencias creativas... Tormentas, campos verdes
  o cualquier cosa que pueda reflejar la creatividad

  import { AnimatePresence, motion, useAnimation } from 'framer-motion'
import type { NextPage } from 'next'
import { useState } from 'react'
import PageLayout from '../layouts/PageLayout'
import sceneSteps from '../constants/sceneSteps'

const Home: NextPage = () => {
  const [currentStep, setCurrentStep] = useState(0)
  const [showContent, setShowContent] = useState(false)

  const headlineControls = useAnimation()

  const SceneComponent =
    sceneSteps[currentStep].component && sceneSteps[currentStep].component

  return (
    <PageLayout
      title="Staged | Experience"
      onFinishEnterAnimation={() => {
        setShowContent(true)
      }}
    >
      <div
        className="flex flex-col relative justify-center items-center w-screen h-screen bg-white
      "
      >
        <AnimatePresence
          exitBeforeEnter
          onExitComplete={() => {
            headlineControls.set({
              opacity: 1,
            })
          }}
        >
          {showContent ? (
            <motion.div
              key={currentStep}
              className="flex relative w-full"
              animate={{ opacity: 1 }}
              initial={{ opacity: 0 }}
              transition={{ ease: 'easeOut', duration: 2 }}
              exit={{
                opacity: 0,
                x: -50,
                transition: {
                  type: 'tween',
                  duration: 1.2,
                },
              }}
            >
              <motion.h1
                className="text-4xl text-center w-screen"
                animate={headlineControls}
              >
                {sceneSteps[currentStep].text}
              </motion.h1>
            </motion.div>
          ) : null}
         
          {SceneComponent ? (
            <SceneComponent headlineControls={headlineControls} />
          ) : null}
        </AnimatePresence>
         <motion.button
            key="xd"
            layout
            className="text-3xl font-semibold bg-yellow-400 mt-6"
            onClick={() => {
              if (currentStep < sceneSteps.length) {
                setCurrentStep((prev) => prev + 1)
              }
            }}
          >
            +
          </motion.button>
      </div>
    </PageLayout>
  )
}

export default Home















import { AnimatePresence, motion, useAnimation } from 'framer-motion'
import type { NextPage } from 'next'
import { useState } from 'react'
import PageLayout from '../layouts/PageLayout'
import sceneSteps from '../constants/sceneSteps'

const Home: NextPage = () => {
  const [currentStep, setCurrentStep] = useState(0)
  const [showContent, setShowContent] = useState(false)

  const headlineControls = useAnimation()

  const SceneComponent =
    sceneSteps[currentStep].component && sceneSteps[currentStep].component

  return (
    <PageLayout
      title="Staged | Experience"
      onFinishEnterAnimation={() => {
        setShowContent(true)
      }}
    >
      <div
        className="flex flex-col relative justify-center items-center w-screen h-screen bg-white
      "
      >
        <AnimatePresence
          exitBeforeEnter
          onExitComplete={() => {
            headlineControls.set({
              opacity: 1,
            })
          }}
        >
          {showContent ? (
            <>
              <motion.div
                key={currentStep}
                className="flex relative w-full"
                animate={{ opacity: 1 }}
                initial={{ opacity: 0 }}
                transition={{ ease: 'easeOut', duration: 2 }}
                exit={{
                  opacity: 0,
                  x: 100,
                  transition: {
                    type: 'tween',
                    duration: 1.2,
                  },
                }}
              >
                <motion.h1
                  className="text-4xl text-center w-screen"
                  animate={headlineControls}
                >
                  {sceneSteps[currentStep].text}
                </motion.h1>
              </motion.div>
            </>
          ) : null}
          {SceneComponent ? (
            <SceneComponent headlineControls={headlineControls} />
          ) : null}
        </AnimatePresence>
        <motion.button
          layout
          className="text-3xl font-semibold bg-yellow-400"
          onClick={() => {
            if (currentStep < sceneSteps.length) {
              setCurrentStep((prev) => prev + 1)
            }
          }}
        >
          +
        </motion.button>
      </div>
    </PageLayout>
  )
}

export default Home
